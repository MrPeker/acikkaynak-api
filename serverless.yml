org: eserozvataf
app: acikkaynak-api
# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: acikkaynak-api # NOTE: update this with your service name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: nodejs8.10

# you can overwrite defaults here
#  stage: dev
  region: eu-west-1

# you can add statements to the Lambda function's IAM Role here
  iamRoleStatements:
    - Effect: Allow
      Action:
        - SQS:SendMessage
      Resource:
        - Fn::GetAtt: [ UsersQueue, Arn ]
        - Fn::GetAtt: [ OrganizationsQueue, Arn ]
        - Fn::GetAtt: [ RepositoriesQueue, Arn ]
    - Effect: Allow
      Action:
        - SNS:Publish
      Resource:
        - Ref: UsersUpdate
        - Ref: OrganizationsUpdate
        - Ref: RepositoriesUpdate

#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
# aws ssm put-parameter --name AUTH_GITHUB_CLIENT_ID --type String --value ..
# aws ssm put-parameter --name AUTH_GITHUB_CLIENT_SECRET --type String --value ..
# aws ssm put-parameter --name MONGODB_CONNECTION_STRING --type String --value ..
  environment:
    # WEBSERVICE_ENDPOINT: https://api.acik-kaynak.org
    # AUTH_GITHUB_CLIENT_ID: ${ssm:AUTH_GITHUB_CLIENT_ID}
    # AUTH_GITHUB_CLIENT_SECRET: ${ssm:AUTH_GITHUB_CLIENT_SECRET}
    # MONGODB_CONNECTION_STRING: ${ssm:MONGODB_CONNECTION_STRING}
    # MONGODB_DATABASE_NAME: acikkaynak
    SNS_UPDATE_USERS:
      Ref: UsersUpdate
    SNS_UPDATE_ORGANIZATIONS:
      Ref: OrganizationsUpdate
    SNS_UPDATE_REPOSITORIES:
      Ref: RepositoriesUpdate
    SQS_QUEUE_USERS:
      Ref: UsersQueue
    SQS_QUEUE_ORGANIZATIONS:
      Ref: OrganizationsQueue
    SQS_QUEUE_REPOSITORIES:
      Ref: RepositoriesQueue

# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

functions:
  index:
    handler: src/routerServerless.root
    events:
      - http:
          path: ''
          method: get
          cors: true
  graphql:
    handler: src/routerServerless.graphql
    events:
      - http:
          path: 'graphql'
          method: post
          cors: true
      - http:
          path: 'graphql'
          method: get
          cors: true
  authGithub:
    handler: src/routerServerless.authGitHub
    events:
      - http:
          path: 'auth/github'
          method: get
          cors: true
  authGithubCallback:
    handler: src/routerServerless.authGitHubCallback
    events:
      - http:
          path: 'auth/githubCallback'
          method: get
          cors: true
  listsProjects:
    handler: src/routerServerless.listsProjects
    events:
      - http:
          path: 'lists/projects'
          method: get
          cors: true
  listsOrganizations:
    handler: src/routerServerless.listsOrganizations
    events:
      - http:
          path: 'lists/organizations'
          method: get
          cors: true
  githubProfile:
    handler: src/routerServerless.gitHubProfile
    events:
      - http:
          path: 'github/profile'
          method: get
          cors: true
  githubImportUser:
    handler: src/routerServerless.gitHubImportUser
    events:
      - sqs:
          arn:
            Fn::GetAtt: [ UsersQueue, Arn ]
          batchSize: 1
  githubImportOrganization:
    handler: src/routerServerless.gitHubImportOrganization
    events:
      - sqs:
          arn:
            Fn::GetAtt: [ OrganizationsQueue, Arn ]
          batchSize: 1
  githubImportRepository:
    handler: src/routerServerless.gitHubImportRepository
    events:
      - sqs:
          arn:
            Fn::GetAtt: [ RepositoriesQueue, Arn ]
          batchSize: 1

# you can add CloudFormation resource templates here
resources:
  Resources:
    UsersUpdate:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: UsersUpdate
    OrganizationsUpdate:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: OrganizationsUpdate
    RepositoriesUpdate:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: RepositoriesUpdate
    UsersQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: Users
    OrganizationsQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: Organizations
    RepositoriesQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: Repositories
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"

plugins:
  - serverless-domain-manager
  - serverless-dotenv-plugin
  - serverless-cloudside-plugin
  - serverless-offline-sns
  - serverless-offline
custom:
  customDomain:
    domainName: api.acik-kaynak.org
    basePath: ''
    stage: ${self:provider.stage}
    createRoute53Record: true
  serverless-offline-sns:
    port: 4002 # a free port for the sns server to run on
    debug: true
